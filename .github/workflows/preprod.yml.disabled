name: Preprod CI/CD

on:
  push:
    branches: [ preprod ]

permissions:
  contents: read
  id-token: write

env:
  IMAGE_NAME: respondr
  ACR_NAME: ${{ secrets.ACR_NAME }}

jobs:
  test-backend:
    name: Backend tests (uv)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Create virtual environment (.venv) with uv
        run: |
          uv venv .venv

      - name: Install backend deps with uv
        shell: bash
        run: |
          source .venv/bin/activate
          uv pip install -r backend/requirements.txt

      - name: Run tests
        shell: bash
        env:
          WEBHOOK_API_KEY: test-key
        run: |
          source .venv/bin/activate
          cd backend
          python run_tests.py

  test-frontend:
    name: Frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend
        run: npm test -- --watchAll=false --ci

  build-and-push:
    name: Build and push Docker image to ACR (preprod)
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure auth configuration
        shell: bash
        run: |
          if [ -z "${AZURE_CLIENT_ID}" ] || [ -z "${AZURE_TENANT_ID}" ] || [ -z "${AZURE_SUBSCRIPTION_ID}" ]; then
            echo "Azure OIDC credentials are not configured." >&2
            echo "Set OIDC secrets (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID)" >&2
            echo "Run: & ./deployment/setup-github-oidc.ps1 -ResourceGroupName respondr -Repo ${GITHUB_REPOSITORY} -Branch main,preprod" >&2
            exit 1
          fi

      - name: Resolve ACR login server
        id: acr
        shell: bash
        run: |
            # If neither is set, attempt discovery from Azure (requires successful azure/login)
            if [ -z "${ACR_NAME}" ] && [ -z "${ACR_LOGIN_SERVER}" ]; then
              echo "ACR secrets not provided. Attempting discovery via az acr list ..."
              DISCOVERED_NAME=$(az acr list --query "[0].name" -o tsv)
              if [ -z "$DISCOVERED_NAME" ]; then
                echo "No ACR found in subscription. Set ACR_NAME or ACR_LOGIN_SERVER as repo secret." >&2
                exit 1
              fi
              # If more than one exists, az query above still returns first; detect multi and bail with guidance
              COUNT=$(az acr list --query "length(@)" -o tsv)
              if [ "$COUNT" != "1" ]; then
                echo "Multiple ACRs found ($COUNT). Set ACR_NAME or ACR_LOGIN_SERVER to choose one." >&2
                exit 1
              fi
              ACR_NAME="$DISCOVERED_NAME"
            fi
            if [ -n "${ACR_LOGIN_SERVER}" ]; then
              LOGIN_SERVER="${ACR_LOGIN_SERVER}"
            else
              LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --query loginServer -o tsv)
            fi
            # If ACR_NAME wasn't provided, try to resolve it from the login server
            if [ -z "${ACR_NAME}" ]; then
              ACR_NAME=$(az acr list --query "[?loginServer=='$LOGIN_SERVER'].name | [0]" -o tsv)
            fi
            if [ -z "${ACR_NAME}" ] || [ -z "${LOGIN_SERVER}" ]; then
              echo "Failed to resolve ACR_NAME or LOGIN_SERVER" >&2
              exit 1
            fi
            echo "loginServer=$LOGIN_SERVER" >> $GITHUB_OUTPUT
            echo "acrName=$ACR_NAME" >> $GITHUB_OUTPUT

      - name: ACR Login
        run: az acr login --name "${{ steps.acr.outputs.acrName }}"

      - name: Build image
        run: |
          docker build -t ${{ steps.acr.outputs.loginServer }}/${{ env.IMAGE_NAME }}:preprod-${{ github.sha }} \
                       -t ${{ steps.acr.outputs.loginServer }}/${{ env.IMAGE_NAME }}:preprod .

      - name: Push image
        run: |
          docker push ${{ steps.acr.outputs.loginServer }}/${{ env.IMAGE_NAME }}:preprod-${{ github.sha }}
          docker push ${{ steps.acr.outputs.loginServer }}/${{ env.IMAGE_NAME }}:preprod

      - name: Summary
        run: |
          echo "Pushed: ${{ steps.acr.outputs.loginServer }}/${{ env.IMAGE_NAME }}:preprod" >> $GITHUB_STEP_SUMMARY
          echo "Pushed: ${{ steps.acr.outputs.loginServer }}/${{ env.IMAGE_NAME }}:preprod-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
